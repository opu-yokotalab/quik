/* Generated By:JavaCC: Do not edit this line. quik_parser.java */
     package java_quik;

     import java_quik.send_om.*;
     import java.awt.*;
     import java.lang.*;
     import java.awt.event.*;
     import java.io.*;
     import java.lang.Object.*;
     import java.lang.*;
     import java.util.*;

     public class quik_parser implements quik_parserConstants {

  final public void Input() throws ParseException {
 int count;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case program:
      program();
      System.out.println("ATOM = " +  Extern_h.atom_pool.node.body.media_atom.name);
      System.out.println("Node = " +  Extern_h.node_pool.next.head.name);
      System.out.println("Leaf = " +  Extern_h.node_pool.next.body.media_atom.name);
      System.out.println("Leaf.seq = " +  Extern_h.node_pool.next.body.seq_next.media_atom.name);
      System.out.println("Leaf.ap = " +  Extern_h.node_pool.next.body.ap.media.media_atom.name + "(" + Extern_h.node_pool.next.body.ap.action.action_atom.name+")" );
      System.out.println("Media.ap = " +  Extern_h.media_pool.ap.media.media_atom.name);

      /* test  to ?Lè´Â*/
      /*
      Exec_Start exec = new Exec_Start();
      exec.exec_process_allocation(Extern_h.atom_pool, 4);
      exec.exec_process_allocation(Extern_h.atom_pool, 0);
      exec.exec_process_allocation(Extern_h.atom_pool, 0);
      exec.exec_process_allocation(Extern_h.atom_pool, 0);
      exec.exec_process_allocation(Extern_h.atom_pool, 0);
      exec.exec_process_allocation(Extern_h.atom_pool, 0);
      exec.exec_process_allocation(Extern_h.atom_pool, 0);
      exec.exec_process_allocation(Extern_h.atom_pool, 0);
      exec.exec_process_allocation(Extern_h.atom_pool, 0);
      exec.exec_process_allocation(Extern_h.atom_pool, 0);
      exec.exec_process_allocation(Extern_h.atom_pool, 0);
      exec.exec_process_allocation(Extern_h.atom_pool, 0);
      exec.exec_process_allocation(Extern_h.atom_pool, 0);
      exec.exec_process_allocation(Extern_h.atom_pool, 0);
      exec.exec_process_allocation(Extern_h.atom_pool, 0);
      exec.exec_process_allocation(Extern_h.atom_pool, 0);
      */

      break;
    case query:
      query();
      break;
    case debug:
      debug();
      jj_consume_token(0);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void program() throws ParseException {
    jj_consume_token(program);
    jj_consume_token(sk2);
    definitionlist();
    jj_consume_token(end);
    jj_consume_token(29);

  }

  final public void query() throws ParseException {
    jj_consume_token(query);

  }

  final public void debug() throws ParseException {
    jj_consume_token(debug);

  }

  final public void definitionlist() throws ParseException {
    jj_consume_token(rule);
    jj_consume_token(sk2);
    rulelist();

  }

  final public void rulelist() throws ParseException {
    scenelist();
    leaf_media_action_list();
            OM_emit.emit_parent();
            OM_emit.emit_action_pointer();
            OM_emit.emit_leaf_ap();
        //    OM_qbj.object_create(0); // 2/10/2001/nerio

  }

  final public void scenelist() throws ParseException {
  T_ConList t_conlist_buf=null;
  T_LeafList t_leaflist_buf=null;
  T_Leaf t_leaf_buf=null;
    t_leaf_buf = body();
    jj_consume_token(30);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STREAM:
      jj_consume_token(STREAM);
      jj_consume_token(Lkakko);
      t_leaflist_buf = bodylist();
      jj_consume_token(Rkakko);
      jj_consume_token(sk2);
      t_leaflist_buf.str_stream = "STREAM";

      OM_emit.emit_node(t_leaf_buf,t_leaflist_buf);
      break;
    case SHARP:
    case 31:
      t_leaflist_buf = bodylist();
      jj_consume_token(sk2);
        // System.out.println(t_leaf_buf.media_atom.name);
      OM_emit.emit_node(t_leaf_buf,t_leaflist_buf);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void leaf_media_action_list() throws ParseException {
T_LeafList t_leaflist_buf=null;
T_Leaf t_leaf_buf=null;
T_ConList t_conlist_buf=null;
    label_1:
    while (true) {
      t_leaf_buf = body();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
        jj_consume_token(30);
        t_leaflist_buf = bodylist();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(sk2);
      if(t_leaflist_buf!=null){ //è™‰è™Æ°Úè´¥?è™≤("<=")LB?hM
        //OM_Noden

        //System.out.println(t_leaf_buf.media_atom.name);
        OM_emit.emit_node(t_leaf_buf,t_leaflist_buf);
      }
      else{  // !DhM (è´°è™Æ°Ú°Òn)
        if(t_leaf_buf.media_atom != null)
          OM_emit.emit_media(t_leaf_buf);
        else{
          OM_emit.emit_action(t_leaf_buf);
          //if(t_leaf_buf.t_ap.t_con.point!=null);
          //  System.out.println("action_point"+t_leaf_buf.t_ap.t_con.point.point_x);

}
  }
      t_leaflist_buf=null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHARP:
      case 31:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
    }
  }

  final public void actionlist() throws ParseException {
  T_ConList t_conlist_buf=null;
  T_Leaf t_leaf_buf=null;
    jj_consume_token(31);
    t_leaf_buf = body();
    jj_consume_token(sk2);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      actionlist();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
      /*  
	  //hashfK(
	  //Sytem.out.println("actiolist_name="+t.image);
	  //Sytem.out.println("hash_test="+t_conlist_buf.con.con_name);
	  T_Hash t_hash_entry = new T_Hash(); 
	  
	  t_hash_entry.test(t.image,t_conlist_buf.con.con_name);
	  t_hash_entry.out();
	  //t_hash_entry.find();
	  */
      //°Òè¢¥?è´Æè´—n
      OM_emit.emit_action(t_leaf_buf);
  }

  final public T_LeafList bodylist() throws ParseException {
  T_Leaf t_leaf=null;
  T_LeafList t_leaflist=null;
    t_leaf = body();
                t_leaf.seq_next=0;t_leaf.nonorder=0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case sk:
    case 32:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case sk:
        jj_consume_token(sk);
       t_leaf.seq_next=1;t_leaf.nonorder=0;
        break;
      case 32:
        jj_consume_token(32);
         t_leaf.seq_next=0;t_leaf.nonorder=1;
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHARP:
    case 31:
      t_leaflist = bodylist();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
         T_LeafList t_leaflist_entry = new T_LeafList(t_leaf,t_leaflist);
         //System.out.println("media_name="+t_leaf.media_atom.name);
         //System.out.println("action_name="+t_leaf.action_atom.name);
         //System.out.println("seq_next="+t_leaf.seq_next);

      {if (true) return t_leaflist_entry;}
    throw new Error("Missing return statement in function");
  }

  final public T_ConList contentslist() throws ParseException {
 String s;
 T_Con t_con=null;
 T_ConList t_conlist=null;
    t_con = contents();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
      jj_consume_token(32);
      t_conlist = contentslist();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
      T_ConList t_conlist_entry = new T_ConList(t_con,t_conlist);
      //T_Con t_con_entry = new T_Con();
      {if (true) return t_conlist_entry;}
    throw new Error("Missing return statement in function");
  }

  final public T_Leaf body() throws ParseException {
  T_ActionPointer t_ap=null;
    t_ap = exactbody();
      if(T_ActionPointer.t_ap_pool == null){
        T_ActionPointer.t_ap_pool = t_ap;
        T_ActionPointer.t_ap_pool_last = t_ap;
      }
      else{
        T_ActionPointer.t_ap_pool_last.next = t_ap;
        T_ActionPointer.t_ap_pool_last = t_ap;
      }
      T_Leaf t_leaf_entry = new T_Leaf(t_ap);
      // if(t_leaf_entry!=null)
      //  System.out.println("action_point"+t_leaf_entry.t_ap.t_con.point.point_x);

      {if (true) return t_leaf_entry;}
    throw new Error("Missing return statement in function");
  }

  final public T_ActionPointer exactbody() throws ParseException {
  T_Con t_con_entry=null;
  T_ConList t_conlist_entry=null;
  OM_Atom media_atom=null;
  OM_Atom action_atom=null;
  T_Con t_con_nece = null;
  T_ConList t_conlist_tmp=null;
  T_ActionPointer exactbody_entry=null;
  String buf="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHARP:
      jj_consume_token(SHARP);
      media_atom = atom();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Lkakko:
        jj_consume_token(Lkakko);
        jj_consume_token(31);
        action_atom = atom();
        jj_consume_token(Rkakko);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        jj_consume_token(33);
        jj_consume_token(34);
        t_conlist_entry = contentslist();
        jj_consume_token(35);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
 //   System.out.println("before1================");

      //if(t_conlist_entry!=null){
      //
      //  if(t_conlist_entry.next!=null){
      //
      //       System.out.println(t_conlist_entry.con.con_name);
      //}
      //}



      if(t_conlist_entry != null){
        t_con_nece = new T_Con();

        t_conlist_tmp = t_conlist_entry;

        while( t_conlist_tmp != null){
          if(t_conlist_tmp.con.con_name.equals("type")){
            t_con_nece.media_type = t_conlist_tmp.con.media_type;
          }
          else if(t_conlist_tmp.con.con_name.equals("font")){
            t_con_nece.font = t_conlist_tmp.con.font;
          }
          else if(t_conlist_tmp.con.con_name.equals("str")){
            t_con_nece.str = t_conlist_tmp.con.str;
          }
          else if(t_conlist_tmp.con.con_name.equals("volume")){
            t_con_nece.volume = t_conlist_tmp.con.volume;
          }
          else if(t_conlist_tmp.con.con_name.equals("url")){
            t_con_nece.url = t_conlist_tmp.con.url;
          }
          else if(t_conlist_tmp.con.con_name.equals("rotation")){
            t_con_nece.rotation = t_conlist_tmp.con.rotation;
          }
          else if(t_conlist_tmp.con.con_name.equals("play_time")){
            t_con_nece.play_time = t_conlist_tmp.con.play_time;
          }
          else if(t_conlist_tmp.con.con_name.equals("synchro_time")){
            t_con_nece.synchro_time = t_conlist_tmp.con.synchro_time;
          }
          else if(t_conlist_tmp.con.con_name.equals("comment")){
            t_con_nece.comment = t_conlist_tmp.con.comment;
          }
          else if(t_conlist_tmp.con.con_name.equals("color")){
            t_con_nece.r = t_conlist_tmp.con.r;
            t_con_nece.g = t_conlist_tmp.con.g;
            t_con_nece.b = t_conlist_tmp.con.b;
          }
          else if(t_conlist_tmp.con.con_name.equals("export_type")){
            t_con_nece.export_type = t_conlist_tmp.con.export_type;
          }
          else if(t_conlist_tmp.con.con_name.equals("scale")){
            t_con_nece.scale = t_conlist_tmp.con.scale;
          }
          else if(t_conlist_tmp.con.con_name.equals("scale_x")){
            t_con_nece.scale_x = t_conlist_tmp.con.scale_x;
          }
          else if(t_conlist_tmp.con.con_name.equals("scale_y")){
            t_con_nece.scale_y = t_conlist_tmp.con.scale_y;
          }
          else if(t_conlist_tmp.con.con_name.equals("scenario_num")){
            t_con_nece.scenario_num = t_conlist_tmp.con.scenario_num;
          }
          //Sytem.out.println("------------------------------------------");
          //Sytem.out.println("t_conlist_tmp.next = " + t_conlist_tmp.next);
          t_conlist_tmp = t_conlist_tmp.next;
        }
      }

      //è´°è™Æ°Ú°Òn
      if(action_atom==null && t_con_nece == null){
        exactbody_entry = new T_ActionPointer(media_atom);
        //Sytem.out.println("before21================");
        {if (true) return exactbody_entry;}
      }

      //media_atom h ^' n
      else if(action_atom==null && media_atom != null && t_con_nece != null){
        exactbody_entry = new T_ActionPointer(media_atom, t_con_nece);
        ////Sytem.out.println("before22================");
        {if (true) return exactbody_entry;}
      }

      //media_atomhactin_atom n (^'L!D4)
      else if(media_atom != null && action_atom != null && t_con_nece == null){
        exactbody_entry = new T_ActionPointer(media_atom,action_atom);
        ////Sytem.out.println("before23================");      
        {if (true) return exactbody_entry;}
      }
      else
        {
          exactbody_entry = new T_ActionPointer(media_atom,action_atom, t_con_nece );
        //  System.out.println("before24================");
          {if (true) return exactbody_entry;}
        }
      break;
    case 31:
      jj_consume_token(31);
      action_atom = atom();
      jj_consume_token(33);
      jj_consume_token(34);
      t_conlist_entry = contentslist();
      jj_consume_token(35);
            t_con_nece = new T_Con();

            t_conlist_tmp = t_conlist_entry;

            while( t_conlist_tmp != null){
              if(t_conlist_tmp.con.con_name.equals("action_type")){
                t_con_nece.action_type = t_conlist_tmp.con.action_type;
              }
              else if(t_conlist_tmp.con.con_name.equals("font")){
                t_con_nece.font = t_conlist_tmp.con.font;
              }
              else if(t_conlist_tmp.con.con_name.equals("rotation")){
                t_con_nece.rotation = t_conlist_tmp.con.rotation;
              }
              else if(t_conlist_tmp.con.con_name.equals("scale")){
                t_con_nece.scale = t_conlist_tmp.con.scale;
              }
              else if(t_conlist_tmp.con.con_name.equals("volume")){
                t_con_nece.volume = t_conlist_tmp.con.volume;
              }
              else if(t_conlist_tmp.con.con_name.equals("comment")){
                t_con_nece.comment = t_conlist_tmp.con.comment;
              }
              else if(t_conlist_tmp.con.con_name.equals("point")){
                t_con_nece.point = t_conlist_tmp.con.point;
                //System.out.println(t_con_nece.point.point_x);
                //if(t_con_nece.point.next!=null)
                 // System.out.println(t_con_nece.point.next.point_x);
              }
              else if(t_conlist_tmp.con.con_name.equals("color")){
                t_con_nece.r = t_conlist_tmp.con.r;
                t_con_nece.g = t_conlist_tmp.con.g;
                t_con_nece.b = t_conlist_tmp.con.b;
              }
              else if(t_conlist_tmp.con.con_name.equals("intonation")){
                t_con_nece.intonation = t_conlist_tmp.con.intonation;
              }
              else if(t_conlist_tmp.con.con_name.equals("pitch")){
                t_con_nece.pitch = t_conlist_tmp.con.pitch;
              }
              else if(t_conlist_tmp.con.con_name.equals("speed")){
                t_con_nece.speed = t_conlist_tmp.con.speed;
              }
              else if(t_conlist_tmp.con.con_name.equals("brightness")){
                t_con_nece.brightness = t_conlist_tmp.con.brightness;
              }
              else if(t_conlist_tmp.con.con_name.equals("steradian")){
                t_con_nece.steradian = t_conlist_tmp.con.steradian;
              }
              //Sytem.out.println("------------------------------------------");
              //Sytem.out.println("t_conlist_tmp.next = " + t_conlist_tmp.next);
              t_conlist_tmp = t_conlist_tmp.next;
            }


          exactbody_entry =  T_ActionPointer.make_Action(action_atom, t_con_nece);
          {if (true) return exactbody_entry;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public OM_Atom atom() throws ParseException {
  String s=null;
  Token t;
    t = jj_consume_token(ATOM);
      //OM_Atom atom_entry = new OM_Atom(t.image);  
      //	OM_Atom.atom_pool = atom_entry;
      OM_Atom atom_entry = OM_Atom.make_ATOM(t.image);  //OM_Atom 
      if(Extern_h.atom_pool == null)
        Extern_h.atom_pool = atom_entry;
      //System.out.println("Atom="+atom_entry.name);
      {if (true) return atom_entry;}
    throw new Error("Missing return statement in function");
  }

  final public String nonatom() throws ParseException {
 String s=null;
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATOM:
      t = jj_consume_token(ATOM);
      //OM_Atom atom_entry = OM_Atom.make_ATOM(t.image);  //OM_Atom 
      //Sytem.out.println("nonAtom="+t.image);
      {if (true) return t.image;}
      break;
    case DIGIT:
      t = jj_consume_token(DIGIT);
          //OM_Float float_entry = OM_Float.make_FLOAT(t.image);  //OM_Float 
          {if (true) return t.image;}
      break;
    case URL:
      t = jj_consume_token(URL);
              //OM_Url url_entry = OM_Url.make_URL(t.image);  //OM_URL 
              //	      System.out.println("URL="+url_entry.url);

              {if (true) return t.image;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public T_Con contents() throws ParseException {
  Token t;
  String zokusei_buf;
  String atai_buf="";
  String r_buf="";
  String g_buf="";
  String b_buf="";

  T_Con t_con_entry = new T_Con();  //T_Con 
  OM_Atom buf_zokusei_atom=null;
  OM_Atom buf_atai_atom=null;
  T_Point pointlist = new T_Point();
    buf_zokusei_atom = atom();
    jj_consume_token(36);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATOM:
    case DIGIT:
    case URL:
      atai_buf = nonatom();
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Lkakko:
        pointlist = pointlist();
        break;
      case r:
        jj_consume_token(r);
        r_buf = nonatom();
        jj_consume_token(32);
        jj_consume_token(g);
        g_buf = nonatom();
        jj_consume_token(32);
        jj_consume_token(b);
        b_buf = nonatom();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  zokusei_buf=buf_zokusei_atom.name;

  /*--begin---------T_Conntypeè™‘----------------------------- */


  //System.out.println("zokusei="+zokusei_buf);
  if(zokusei_buf.equals("type")){
    t_con_entry.con_name = zokusei_buf;
    t_con_entry.media_type = Integer.parseInt(atai_buf);
    //Sytem.out.println("T_Con(type)="+t_con_entry.con_name);
    {if (true) return  t_con_entry;}
  }

  else if(zokusei_buf.equals("action_type")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.action_type = Integer.parseInt(atai_buf);
    //Sytem.out.println("T_Con(action_type)="+t_con_entry.con_name);
    {if (true) return t_con_entry;}
  }

  else if(zokusei_buf.equals("export_type")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.export_type = Integer.parseInt(atai_buf);
    {if (true) return t_con_entry;}
  }

  else if(zokusei_buf.equals("rotation")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.rotation = atai_buf;
    {if (true) return t_con_entry;}
  }

  else if(zokusei_buf.equals("scale_x")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.scale_x = Integer.parseInt(atai_buf);
    {if (true) return t_con_entry;}
  }

  else if(zokusei_buf.equals("scale_y")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.scale_y = Integer.parseInt(atai_buf);
    {if (true) return t_con_entry;}
  }

  else if(zokusei_buf.equals("scale")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.scale = Float.valueOf(atai_buf).floatValue();
    {if (true) return t_con_entry;}
  }

  else if(zokusei_buf.equals("font")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.font = atai_buf;
    //Sytem.out.println("T_Con(font)="+t_con_entry.con_name);
    {if (true) return  t_con_entry;}
  }

  else if(zokusei_buf.equals("volume")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.volume = Float.valueOf(atai_buf).floatValue();
    //Sytem.out.println("T_Con(volume)="+t_con_entry.con_name);
    {if (true) return  t_con_entry;}
  }

  else if(zokusei_buf.equals("url")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.url = atai_buf;
    //Sytem.out.println("T_Con(url)="+t_con_entry.con_name);
    {if (true) return  t_con_entry;}
  }

  else if(zokusei_buf.equals("str")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.str = atai_buf;
       {if (true) return  t_con_entry;}
  }

  else if(zokusei_buf.equals("play_time")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.play_time = Integer.parseInt(atai_buf);
    //Sytem.out.println("T_Con(play_time)="+t_con_entry.con_name);
    {if (true) return t_con_entry;}
  }


  else if(zokusei_buf.equals("synchro_time")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.synchro_time = Integer.parseInt(atai_buf);
    //Sytem.out.println("T_Con(synchro_time)="+t_con_entry.con_name);
    {if (true) return  t_con_entry;}
  }


  else if(zokusei_buf.equals("comment")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.comment = atai_buf;
    //Sytem.out.println("T_Con(comment)="+t_con_entry.con_name);
    {if (true) return  t_con_entry;}
  }

  else if(zokusei_buf.equals("point")){
    t_con_entry.con_name=zokusei_buf;

    /*  Stack pointliststack = new Stack();
    while (pointlist != null)//???H-
      {
	pointliststack.push(pointlist);
	pointlist = pointlist.next;
      }
    
    while(pointliststack.empty()!=true){
      pointlist=(T_Point)pointliststack.pop();

    }
    */


    t_con_entry.point = pointlist;

    // System.out.println("T_Con(point)="+t_con_entry.con_name);
       //   System.out.println(pointlist.point_x);
    //   System.out.println(pointlist.point_y);
    //   System.out.println(pointlist.point_z );
       // if(pointlist.next!=null)
       //  System.out.println("next"+pointlist.next.point_x);
    //   System.out.println(pointlist.next.point_y);
    //   System.out.println(pointlist.next.point_z);
    {if (true) return  t_con_entry;}
  }

  else if(zokusei_buf.equals("color")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.r = Float.valueOf(r_buf).floatValue();
    t_con_entry.g = Float.valueOf(g_buf).floatValue();
    t_con_entry.b = Float.valueOf(b_buf).floatValue();

    {if (true) return  t_con_entry;}
  }

  else if(zokusei_buf.equals("intonation")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.intonation = Float.valueOf(atai_buf).floatValue();

    {if (true) return  t_con_entry;}
  }

  else if(zokusei_buf.equals("pitch")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.pitch = Float.valueOf(atai_buf).floatValue();

    {if (true) return  t_con_entry;}
  }

  else if(zokusei_buf.equals("speed")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.speed = Float.valueOf(atai_buf).floatValue();

    {if (true) return  t_con_entry;}
  }

  else if(zokusei_buf.equals("brightness")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.brightness = Float.valueOf(atai_buf).floatValue();

    {if (true) return  t_con_entry;}
  }

  else if(zokusei_buf.equals("steradian")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.steradian = Float.valueOf(atai_buf).floatValue();

    {if (true) return  t_con_entry;}
  }

  else if(zokusei_buf.equals("scenario_num")){
    t_con_entry.con_name=zokusei_buf;
    t_con_entry.scenario_num = Float.valueOf(atai_buf).floatValue();

    {if (true) return  t_con_entry;}
  }
  /*--end----------T_Conntypeè™‘-------------------------------*/

    throw new Error("Missing return statement in function");
  }

  final public T_Point pointlist() throws ParseException {
  Token x=null,y=null,z=null,r,g,b;
  float x_buf=1.1f;
  float y_buf=1.1f;
  float z_buf=1.1f;


  float r_buf=1.1f;
  float g_buf=1.1f;
  float b_buf=1.1f;

  T_Point next_point=null;
  String s="";
    jj_consume_token(Lkakko);
    x = jj_consume_token(DIGIT);
    jj_consume_token(32);
    y = jj_consume_token(DIGIT);
    jj_consume_token(32);
    z = jj_consume_token(DIGIT);
    jj_consume_token(Rkakko);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
      jj_consume_token(32);
      next_point = pointlist();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
      x_buf=Float.valueOf(x.image).floatValue();
      y_buf=Float.valueOf(y.image).floatValue();
      z_buf=Float.valueOf(z.image).floatValue();

      T_Point t_point_entry = new T_Point(x_buf,y_buf,z_buf);
      t_point_entry.next=next_point;
      {if (true) return t_point_entry;}
    throw new Error("Missing return statement in function");
  }

  public quik_parserTokenManager token_source;
  ASCII_UCodeESC_CharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  final private int[] jj_la1_0 = {0x3800,0x81100000,0x40000000,0x80100000,0x80000000,0x400,0x400,0x80100000,0x0,0x80,0x0,0x80100000,0x1c000000,0x200080,0x1c000020,0x0,};
  final private int[] jj_la1_1 = {0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x2,0x0,0x0,0x0,0x0,0x1,};

  public quik_parser(java.io.InputStream stream) {
    jj_input_stream = new ASCII_UCodeESC_CharStream(stream, 1, 1);
    token_source = new quik_parserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public quik_parser(java.io.Reader stream) {
    jj_input_stream = new ASCII_UCodeESC_CharStream(stream, 1, 1);
    token_source = new quik_parserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public quik_parser(quik_parserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public void ReInit(quik_parserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[37];
    for (int i = 0; i < 37; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

       /* //java.util.Stack argStack = new java.util.Stack();
       public static void main(String args[]) throws ParseException {
	 quik_parser parser = new quik_parser(System.in);
	 parser.Input();
       }
       */
     }
